services:
  - type: web
    runtime: static
    name: devet-frontend
    repo: https://github.com/RiccardoSoroImola/devet_frontend
    branch: main
    # Esegui l'installazione dalla root del repo e poi esegui gli script del pacchetto apps/web
    root: .
    buildCommand: pnpm install --frozen-lockfile && pnpm --filter ./apps/web... run build && pnpm --filter ./apps/web... run export
    staticPublishPath: apps/web/out
    autoDeploy: true
    plan: free
    envVars:
      - key: NEXT_PUBLIC_API_URL
        value: "https://devet-backend.onrender.com"

  - type: web
    name: devet-backend
    repo: https://github.com/RiccardoSoroImola/devet_frontend
    branch: main
    env: node
    root: .
    # Installa le dipendenze dal root e costruisci il pacchetto apps/api
    buildCommand: pnpm install --frozen-lockfile && pnpm --filter ./apps/api... run build
    # Start esegue lo script start definito in apps/api/package.json
    startCommand: pnpm --filter ./apps/api... run start
    healthCheckPath: /health
    autoDeploy: true
    plan: free
    envVars:
      - key: NODE_ENV
        value: production

# NOTE:
# - Questo file assume:
#   - apps/web è una Next.js app che supporta `next build` + `next export` (l'output è apps/web/out).
#   - apps/api è il backend con script build/start in apps/api/package.json.
# - Le buildCommand/startCommand vengono eseguite nella directory 'root' (qui la root del repo),
#   perciò usiamo comandi pnpm workspace-aware per assicurare installazione e build corrette.
# - Non mettere segreti sensibili qui; configura DATABASE_URL, JWT_SECRET, ecc. nel pannello Environment di Render.
# - Assicurati che il backend usi process.env.PORT per l'ascolto (es. const port = process.env.PORT || 3000).
# - Se apps/web non può essere esportata staticamente (usa getServerSideProps), dovremo cambiare il frontend in type: web senza runtime: static e usare startCommand per eseguire next start.
